{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"JSON Scout","text":"<p>Scout JSON structure and navigate data safely with intuitive exploration tools.</p> <p>JSON Scout provides a robust suite of tools designed for developers and data professionals who need to introspect, analyze, and safely navigate complex JSON data structures. Whether you're working with APIs, configuration files, or large datasets, JSON Scout offers both low-level utilities and high-level abstractions to make JSON exploration intuitive and error-free.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#structural-analysis","title":"\ud83d\udd0d Structural Analysis","text":"<ul> <li>Schema Discovery: Automatically analyze and understand JSON structure patterns</li> <li>Hierarchy Inspection: Navigate nested objects and arrays with ease</li> <li>Statistical Analysis: Generate frequency reports for keys and data patterns</li> </ul>"},{"location":"#safe-navigation","title":"\ud83d\udee1\ufe0f Safe Navigation","text":"<ul> <li>Exception-Free Access: Monadic-style <code>Maybe</code> wrapper prevents runtime errors</li> <li>Chainable Operations: Fluent interface for complex data traversal</li> <li>Null-Safe Operations: Gracefully handle missing keys and malformed data</li> </ul>"},{"location":"#comprehensive-utilities","title":"\ud83d\udd27 Comprehensive Utilities","text":"<ul> <li>File Operations: Robust JSON file discovery and loading with encoding support</li> <li>XML Integration: Seamless XML-to-JSON conversion capabilities</li> <li>Unified Interface: Single entry point combining all functionality</li> </ul>"},{"location":"#enterprise-ready","title":"\ud83d\udcca Enterprise Ready","text":"<ul> <li>Type Safety: Full type annotations and comprehensive error handling</li> <li>Performance Optimized: Efficient algorithms for large data structures</li> <li>Well Documented: Complete API documentation with examples</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install JSON Scout using pip:</p> <pre><code>pip install json-scout\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#basic-exploration","title":"Basic Exploration","text":"<pre><code>import jsonscout as js\n\n# Load and explore JSON data\ndata = {\n    \"users\": [\n        {\"name\": \"Alice\", \"age\": 30, \"email\": \"alice@example.com\"},\n        {\"name\": \"Bob\", \"age\": 25},\n        {\"name\": \"Charlie\", \"age\": 35, \"email\": \"charlie@example.com\"}\n    ],\n    \"metadata\":     \"metadata\": {\"version\": \"1.0\", \"created\": \"2024-01-01\"}\n}\n\n# Use the unified Xplore interface\nexplorer = js.Xplore(data)\n\n# Safe navigation with automatic error handling\nuser_name = explorer['users'][0]['name'].value()  # Returns: \"Alice\"\nmissing_field = explorer['users'][1]['email'].value()  # Returns: None (no exception)\n\n# Discover available keys\nprint(explorer.keys())  # ['users', 'metadata']\n</code></pre>"},{"location":"#structural-analysis_1","title":"Structural Analysis","text":"<pre><code># Analyze data structure patterns\nexplore = js.Explore(data['users'])\nfield_frequency = explore.field_counts()\nprint(field_frequency)  # {'name': 3, 'age': 3, 'email': 2}\n\n# Safe array operations with transformations\nmaybe_users = js.Maybe(data['users'])\nadult_names = maybe_users.array(\n    func=lambda i, user: user.get('name'),\n    filter=lambda i, user: user.get('age', 0) &gt;= 30\n)\nprint(adult_names)  # ['Alice', 'Charlie']\n</code></pre>"},{"location":"#file-operations","title":"File Operations","text":"<pre><code># Discover and load JSON files\njson_files = js.get_json_file_paths('/path/to/data', '*.json')\nfor file_path in json_files:\n    try:\n        data = js.read_json_file(file_path)\n        explorer = js.Xplore(data)\n        # Process each file safely\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n</code></pre>"},{"location":"#xml-integration","title":"XML Integration","text":"<pre><code># Convert XML to JSON-like structures\nxml_data = \"\"\"\n}\n\n# Use the unified Xplore interface\nexplorer = je.Xplore(data)\n\n# Safe navigation with automatic error handling\nuser_name = explorer['users'][0]['name'].value()  # Returns: \"Alice\"\nmissing_field = explorer['users'][1]['email'].value()  # Returns: None (no exception)\n\n# Discover available keys\nprint(explorer.keys())  # ['users', 'metadata']\n</code></pre>"},{"location":"#structural-analysis_2","title":"Structural Analysis","text":"<pre><code># Analyze data structure patterns\nexplore = je.Explore(data['users'])\nfield_frequency = explore.field_counts()\nprint(field_frequency)  # {'name': 3, 'age': 3, 'email': 2}\n\n# Safe array operations with transformations\nmaybe_users = je.Maybe(data['users'])\nadult_names = maybe_users.array(\n    func=lambda i, user: user.get('name'),\n    filter=lambda i, user: user.get('age', 0) &gt;= 30\n)\nprint(adult_names)  # ['Alice', 'Charlie']\n</code></pre>"},{"location":"#file-operations_1","title":"File Operations","text":"<pre><code># Discover and load JSON files\njson_files = je.get_json_file_paths('/path/to/data', '*.json')\nfor file_path in json_files:\n    try:\n        data = je.read_json_file(file_path)\n        explorer = je.Xplore(data)\n        # Process each file safely\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n</code></pre>"},{"location":"#xml-integration_1","title":"XML Integration","text":"<pre><code># Convert XML to JSON-like structures\nxml_data = \"\"\"\n&lt;users&gt;\n    &lt;user&gt;\n        &lt;name&gt;Alice&lt;/name&gt;\n        &lt;age&gt;30&lt;/age&gt;\n    &lt;/user&gt;\n&lt;/users&gt;\n\"\"\"\n\nexplorer = js.Xplore(xml_data)\nif explorer.xml:\n    json_structure = explorer.xml.to_dict()\n    print(json_structure)  # {'user': {'name': 'Alice', 'age': '30'}}\n</code></pre>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#api-response-analysis","title":"API Response Analysis","text":"<ul> <li>Schema Evolution: Track changes in API response structures over time</li> <li>Data Validation: Verify expected fields and data types in responses</li> <li>Error Handling: Safely extract data from potentially malformed API responses</li> </ul>"},{"location":"#configuration-management","title":"Configuration Management","text":"<ul> <li>Dynamic Configuration: Navigate complex configuration hierarchies safely</li> <li>Environment Validation: Ensure required configuration keys are present</li> <li>Default Value Handling: Provide fallbacks for missing configuration values</li> </ul>"},{"location":"#data-pipeline-processing","title":"Data Pipeline Processing","text":"<ul> <li>ETL Operations: Transform and validate JSON data in processing pipelines</li> <li>Data Quality Assessment: Analyze data completeness and structure consistency</li> <li>Batch Processing: Process large numbers of JSON files with robust error handling</li> </ul>"},{"location":"#research-and-analysis","title":"Research and Analysis","text":"<ul> <li>Dataset Exploration: Quickly understand the structure of unfamiliar JSON datasets</li> <li>Statistical Analysis: Generate reports on data distribution and patterns</li> <li>Data Profiling: Create comprehensive profiles of JSON data sources</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>JSON Scout is built around four core components:</p> <ul> <li><code>Explore</code>: Lightweight structural analysis and schema discovery</li> <li><code>Maybe</code>: Monadic wrapper for safe, chainable data access</li> <li><code>SimpleXML</code>: Efficient XML-to-dictionary conversion utilities</li> <li><code>Xplore</code>: Unified facade combining all functionality into a single interface</li> </ul> <p>This modular design allows you to use individual components for specific tasks or leverage the unified interface for comprehensive JSON exploration workflows.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>API Reference: Complete documentation of all classes and methods</li> <li>Examples: Comprehensive usage examples and patterns</li> <li>Best Practices: Guidelines for effective JSON exploration</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our contributing guidelines for details on how to submit bug reports, feature requests, and code contributions.</p>"},{"location":"#license","title":"License","text":"<p>JSON Scout is released under the Apache License 2.0. See the LICENSE file for details. Copyright \u00a9 2025 Chathura Jayalath. See the NOTICE file for more details.</p>"},{"location":"api/","title":"API Reference","text":"<p>This comprehensive API reference is automatically generated from the source code docstrings using mkdocstrings. All classes, methods, and functions are documented with complete parameter descriptions, return values, and usage examples following NumPy documentation standards.</p>"},{"location":"api/#package-overview","title":"Package Overview","text":"<p>The <code>jsonscout</code> package provides a comprehensive suite of tools for JSON data structure exploration, safe navigation, and analysis. All primary components are available through the main package namespace for convenient access.</p>"},{"location":"api/#jsonscout","title":"jsonscout","text":"<p>JSONExplore - A Python package for exploring and navigating JSON structures.</p> <p>This package provides tools for introspecting, summarizing, and safely accessing nested JSON data structures. It includes utilities for file handling, safe data access patterns, and unified exploration interfaces.</p> <p>Classes:</p> Name Description <code>Explore : class</code> <p>Lightweight structural explorer for JSON objects.</p> <code>Maybe : class</code> <p>Monadic-style wrapper for safe optional traversal.</p> <code>Xplore : class</code> <p>Unified convenience facade combining all exploration tools.</p> <code>SimpleXML : class</code> <p>Utility for converting XML to nested dictionary structures.</p> <p>Functions:</p> Name Description <code>get_json_file_paths : function</code> <p>Find JSON files in a directory using glob patterns.</p> <code>read_json_file : function</code> <p>Read and parse JSON files with error handling.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import jsonexplore as je\n&gt;&gt;&gt; data = {'users': [{'name': 'Alice', 'age': 30}]}\n&gt;&gt;&gt; explorer = je.Xplore(data)\n&gt;&gt;&gt; name = explorer['users'][0]['name'].value()\n&gt;&gt;&gt; print(name)  # 'Alice'\n</code></pre>"},{"location":"api/#jsonscout.get_json_file_paths","title":"get_json_file_paths","text":"<pre><code>get_json_file_paths(base_path, pattern='*.json')\n</code></pre> <p>Find JSON files in a directory using glob patterns.</p> <p>Parameters:</p> Name Type Description Default <code>base_path</code> <code>str</code> <p>The base directory path to search for JSON files.</p> required <code>pattern</code> <code>str</code> <p>The glob pattern to match files, by default \"*.json\".</p> <code>'*.json'</code> <p>Returns:</p> Type Description <code>list of str</code> <p>A list of absolute file paths to JSON files found in the directory.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; json_files = get_json_file_paths('/path/to/data')\n&gt;&gt;&gt; print(json_files)\n['/path/to/data/file1.json', '/path/to/data/file2.json']\n</code></pre> <pre><code>&gt;&gt;&gt; custom_files = get_json_file_paths('/path/to/data', 'config*.json')\n&gt;&gt;&gt; print(custom_files)\n['/path/to/data/config_dev.json', '/path/to/data/config_prod.json']\n</code></pre> Source code in <code>src\\jsonscout\\file_reader.py</code> <pre><code>def get_json_file_paths(base_path, pattern=\"*.json\"):\n    \"\"\"\n    Find JSON files in a directory using glob patterns.\n\n    Parameters\n    ----------\n    base_path : str\n        The base directory path to search for JSON files.\n    pattern : str, optional\n        The glob pattern to match files, by default \"*.json\".\n\n    Returns\n    -------\n    list of str\n        A list of absolute file paths to JSON files found in the directory.\n\n    Examples\n    --------\n    &gt;&gt;&gt; json_files = get_json_file_paths('/path/to/data')\n    &gt;&gt;&gt; print(json_files)\n    ['/path/to/data/file1.json', '/path/to/data/file2.json']\n\n    &gt;&gt;&gt; custom_files = get_json_file_paths('/path/to/data', 'config*.json')\n    &gt;&gt;&gt; print(custom_files)\n    ['/path/to/data/config_dev.json', '/path/to/data/config_prod.json']\n    \"\"\"\n    json_files = glob.glob(os.path.join(base_path, pattern))\n    return json_files\n</code></pre>"},{"location":"api/#jsonscout.read_json_file","title":"read_json_file","text":"<pre><code>read_json_file(file_path, encoding='utf-8')\n</code></pre> <p>Read and parse a JSON file with error handling.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The absolute path to the JSON file to read.</p> required <code>encoding</code> <code>str</code> <p>The file encoding to use when reading, by default \"utf-8\".</p> <code>'utf-8'</code> <p>Returns:</p> Type Description <code>dict or list</code> <p>The parsed JSON data structure.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified file does not exist.</p> <code>JSONDecodeError</code> <p>If the file contents are not valid JSON.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = read_json_file('/path/to/data.json')\n&gt;&gt;&gt; print(type(data))\n&lt;class 'dict'&gt;\n</code></pre> <pre><code>&gt;&gt;&gt; data = read_json_file('/path/to/array.json')\n&gt;&gt;&gt; print(type(data))\n&lt;class 'list'&gt;\n</code></pre> Source code in <code>src\\jsonscout\\file_reader.py</code> <pre><code>def read_json_file(file_path, encoding=\"utf-8\"):\n    \"\"\"\n    Read and parse a JSON file with error handling.\n\n    Parameters\n    ----------\n    file_path : str\n        The absolute path to the JSON file to read.\n    encoding : str, optional\n        The file encoding to use when reading, by default \"utf-8\".\n\n    Returns\n    -------\n    dict or list\n        The parsed JSON data structure.\n\n    Raises\n    ------\n    FileNotFoundError\n        If the specified file does not exist.\n    json.JSONDecodeError\n        If the file contents are not valid JSON.\n\n    Examples\n    --------\n    &gt;&gt;&gt; data = read_json_file('/path/to/data.json')\n    &gt;&gt;&gt; print(type(data))\n    &lt;class 'dict'&gt;\n\n    &gt;&gt;&gt; data = read_json_file('/path/to/array.json')\n    &gt;&gt;&gt; print(type(data))\n    &lt;class 'list'&gt;\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"File not found at {file_path}\")\n\n    with open(file_path, \"r\", encoding=encoding) as file:\n        data = json.load(file)\n    return data\n</code></pre>"},{"location":"api/#core-modules","title":"Core Modules","text":""},{"location":"api/#file-operations-module","title":"File Operations Module","text":"<p>The <code>file_reader</code> module provides essential utilities for locating and loading JSON data files from the filesystem with robust error handling and encoding support.</p>"},{"location":"api/#jsonscout.file_reader","title":"file_reader","text":"<p>File reader utilities for JSON file operations.</p> <p>This module provides utility functions for finding and reading JSON files from the filesystem with proper error handling.</p>"},{"location":"api/#jsonscout.file_reader.get_json_file_paths","title":"get_json_file_paths","text":"<pre><code>get_json_file_paths(base_path, pattern='*.json')\n</code></pre> <p>Find JSON files in a directory using glob patterns.</p> <p>Parameters:</p> Name Type Description Default <code>base_path</code> <code>str</code> <p>The base directory path to search for JSON files.</p> required <code>pattern</code> <code>str</code> <p>The glob pattern to match files, by default \"*.json\".</p> <code>'*.json'</code> <p>Returns:</p> Type Description <code>list of str</code> <p>A list of absolute file paths to JSON files found in the directory.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; json_files = get_json_file_paths('/path/to/data')\n&gt;&gt;&gt; print(json_files)\n['/path/to/data/file1.json', '/path/to/data/file2.json']\n</code></pre> <pre><code>&gt;&gt;&gt; custom_files = get_json_file_paths('/path/to/data', 'config*.json')\n&gt;&gt;&gt; print(custom_files)\n['/path/to/data/config_dev.json', '/path/to/data/config_prod.json']\n</code></pre> Source code in <code>src\\jsonscout\\file_reader.py</code> <pre><code>def get_json_file_paths(base_path, pattern=\"*.json\"):\n    \"\"\"\n    Find JSON files in a directory using glob patterns.\n\n    Parameters\n    ----------\n    base_path : str\n        The base directory path to search for JSON files.\n    pattern : str, optional\n        The glob pattern to match files, by default \"*.json\".\n\n    Returns\n    -------\n    list of str\n        A list of absolute file paths to JSON files found in the directory.\n\n    Examples\n    --------\n    &gt;&gt;&gt; json_files = get_json_file_paths('/path/to/data')\n    &gt;&gt;&gt; print(json_files)\n    ['/path/to/data/file1.json', '/path/to/data/file2.json']\n\n    &gt;&gt;&gt; custom_files = get_json_file_paths('/path/to/data', 'config*.json')\n    &gt;&gt;&gt; print(custom_files)\n    ['/path/to/data/config_dev.json', '/path/to/data/config_prod.json']\n    \"\"\"\n    json_files = glob.glob(os.path.join(base_path, pattern))\n    return json_files\n</code></pre>"},{"location":"api/#jsonscout.file_reader.read_json_file","title":"read_json_file","text":"<pre><code>read_json_file(file_path, encoding='utf-8')\n</code></pre> <p>Read and parse a JSON file with error handling.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The absolute path to the JSON file to read.</p> required <code>encoding</code> <code>str</code> <p>The file encoding to use when reading, by default \"utf-8\".</p> <code>'utf-8'</code> <p>Returns:</p> Type Description <code>dict or list</code> <p>The parsed JSON data structure.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified file does not exist.</p> <code>JSONDecodeError</code> <p>If the file contents are not valid JSON.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = read_json_file('/path/to/data.json')\n&gt;&gt;&gt; print(type(data))\n&lt;class 'dict'&gt;\n</code></pre> <pre><code>&gt;&gt;&gt; data = read_json_file('/path/to/array.json')\n&gt;&gt;&gt; print(type(data))\n&lt;class 'list'&gt;\n</code></pre> Source code in <code>src\\jsonscout\\file_reader.py</code> <pre><code>def read_json_file(file_path, encoding=\"utf-8\"):\n    \"\"\"\n    Read and parse a JSON file with error handling.\n\n    Parameters\n    ----------\n    file_path : str\n        The absolute path to the JSON file to read.\n    encoding : str, optional\n        The file encoding to use when reading, by default \"utf-8\".\n\n    Returns\n    -------\n    dict or list\n        The parsed JSON data structure.\n\n    Raises\n    ------\n    FileNotFoundError\n        If the specified file does not exist.\n    json.JSONDecodeError\n        If the file contents are not valid JSON.\n\n    Examples\n    --------\n    &gt;&gt;&gt; data = read_json_file('/path/to/data.json')\n    &gt;&gt;&gt; print(type(data))\n    &lt;class 'dict'&gt;\n\n    &gt;&gt;&gt; data = read_json_file('/path/to/array.json')\n    &gt;&gt;&gt; print(type(data))\n    &lt;class 'list'&gt;\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"File not found at {file_path}\")\n\n    with open(file_path, \"r\", encoding=encoding) as file:\n        data = json.load(file)\n    return data\n</code></pre>"},{"location":"api/#structural-exploration-module","title":"Structural Exploration Module","text":"<p>The <code>Explore</code> class offers lightweight structural analysis capabilities for JSON objects, enabling inspection of nested hierarchies and statistical analysis of data schemas.</p>"},{"location":"api/#jsonscout.Explore","title":"Explore","text":"<p>Lightweight structural explorer for JSON objects.</p> <p>This module provides the Explore class for basic inspection and navigation of nested JSON data structures (dictionaries and lists).</p>"},{"location":"api/#jsonscout.Explore.Explore","title":"Explore","text":"<pre><code>Explore(json_object)\n</code></pre> <p>A lightweight explorer for inspecting JSON object structures.</p> <p>This class provides methods to examine the structure of JSON data, navigate through nested objects, and analyze the distribution of child properties across collections.</p> <p>Parameters:</p> Name Type Description Default <code>json_object</code> <code>dict, list, or any</code> <p>The JSON object to explore. Can be a dictionary, list, or any other type.</p> required <p>Attributes:</p> Name Type Description <code>data</code> <code>dict, list, or any</code> <p>The original JSON object being explored.</p> <code>child_keys</code> <code>list</code> <p>A list of keys (for dicts) or indices (for lists) of direct children.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = {'users': [{'name': 'Alice'}, {'name': 'Bob'}]}\n&gt;&gt;&gt; explorer = Explore(data)\n&gt;&gt;&gt; print(explorer.get_child_keys())\n['users']\n</code></pre> <pre><code>&gt;&gt;&gt; users_explorer = explorer.explore_child('users')\n&gt;&gt;&gt; print(users_explorer.get_child_keys())\n[0, 1]\n</code></pre> Source code in <code>src\\jsonscout\\Explore.py</code> <pre><code>def __init__(self, json_object):\n    self.data = json_object\n    self.child_keys = []\n    if type(self.data) is dict:\n        self.child_keys = list(self.data.keys())\n    if type(self.data) is list:\n        self.child_keys = [idx for idx in range(len(self.data))]\n</code></pre>"},{"location":"api/#jsonscout.Explore.Explore.child","title":"child","text":"<pre><code>child(child_key)\n</code></pre> <p>Create a new Explore instance for a specific child.</p> <p>Parameters:</p> Name Type Description Default <code>child_key</code> <code>str or int</code> <p>The key (for dict) or index (for list) of the child to explore.</p> required <p>Returns:</p> Type Description <code>Explore</code> <p>A new Explore instance wrapping the child object, or None if not found.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = {'users': [{'name': 'Alice'}]}\n&gt;&gt;&gt; explorer = Explore(data)\n&gt;&gt;&gt; child = explorer.child('users')\n&gt;&gt;&gt; print(type(child.data))\n&lt;class 'list'&gt;\n</code></pre> Source code in <code>src\\jsonscout\\Explore.py</code> <pre><code>def child(self, child_key):\n    \"\"\"\n    Create a new Explore instance for a specific child.\n\n    Parameters\n    ----------\n    child_key : str or int\n        The key (for dict) or index (for list) of the child to explore.\n\n    Returns\n    -------\n    Explore\n        A new Explore instance wrapping the child object, or None if not found.\n\n    Examples\n    --------\n    &gt;&gt;&gt; data = {'users': [{'name': 'Alice'}]}\n    &gt;&gt;&gt; explorer = Explore(data)\n    &gt;&gt;&gt; child = explorer.child('users')\n    &gt;&gt;&gt; print(type(child.data))\n    &lt;class 'list'&gt;\n    \"\"\"\n    if child_key in self.child_keys:\n        return Explore(self.data[child_key])\n    return Explore(None)\n</code></pre>"},{"location":"api/#jsonscout.Explore.Explore.field_counts","title":"field_counts","text":"<pre><code>field_counts(verbose=False)\n</code></pre> <p>Analyze the distribution of field names across all children in a collection.</p> <p>This method examines each child of the current object and counts how frequently each field name appears across all children. Useful for understanding the schema of collections with varying structures.</p> <p>Parameters:</p> Name Type Description Default <code>verbose</code> <code>bool</code> <p>If True, print detailed exploration progress, by default False.</p> <code>False</code> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary mapping field names to their occurrence counts.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = {\n...     'users': [\n...         {'name': 'Alice', 'age': 30},\n...         {'name': 'Bob', 'email': 'bob@example.com'},\n...         {'name': 'Charlie', 'age': 25}\n...     ]\n... }\n&gt;&gt;&gt; explorer = Explore(data['users'])\n&gt;&gt;&gt; counts = explorer.field_counts()\n&gt;&gt;&gt; print(counts)\n{'name': 3, 'age': 2, 'email': 1}\n</code></pre> Notes <p>This method is particularly useful for analyzing collections where objects may have varying schemas or optional properties.</p> Source code in <code>src\\jsonscout\\Explore.py</code> <pre><code>def field_counts(self, verbose=False):\n    \"\"\"\n    Analyze the distribution of field names across all children in a collection.\n\n    This method examines each child of the current object and counts\n    how frequently each field name appears across all children.\n    Useful for understanding the schema of collections with varying structures.\n\n    Parameters\n    ----------\n    verbose : bool, optional\n        If True, print detailed exploration progress, by default False.\n\n    Returns\n    -------\n    dict\n        A dictionary mapping field names to their occurrence counts.\n\n    Examples\n    --------\n    &gt;&gt;&gt; data = {\n    ...     'users': [\n    ...         {'name': 'Alice', 'age': 30},\n    ...         {'name': 'Bob', 'email': 'bob@example.com'},\n    ...         {'name': 'Charlie', 'age': 25}\n    ...     ]\n    ... }\n    &gt;&gt;&gt; explorer = Explore(data['users'])\n    &gt;&gt;&gt; counts = explorer.field_counts()\n    &gt;&gt;&gt; print(counts)\n    {'name': 3, 'age': 2, 'email': 1}\n\n    Notes\n    -----\n    This method is particularly useful for analyzing collections where\n    objects may have varying schemas or optional properties.\n    \"\"\"\n    if verbose:\n        print(f\"Exploring grandchildren of type: {type(self.child_keys)} (size={len(self.data)}) with keys: {self.keys()}\")\n    counts = {}\n    for child_key in self.child_keys:\n        if verbose:\n            print(f\"Exploring child key: {child_key}\")\n        expChild = self.child(child_key)\n        if verbose:\n            print(f\"  Child type: {type(expChild.data)} with keys: {expChild.keys()}\")\n        for grandChildKey in expChild.keys():\n            if verbose:\n                print(f\"    Found grandchild key: {grandChildKey}\")\n            if grandChildKey in counts:\n                counts[grandChildKey] += 1\n            else:\n                counts[grandChildKey] = 1\n\n    return counts\n</code></pre>"},{"location":"api/#jsonscout.Explore.Explore.keys","title":"keys","text":"<pre><code>keys()\n</code></pre> <p>Get the keys or indices of direct children.</p> <p>Returns:</p> Type Description <code>list</code> <p>For dictionaries: list of string keys. For lists: list of integer indices. For other types: empty list.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = {'a': 1, 'b': 2}\n&gt;&gt;&gt; explorer = Explore(data)\n&gt;&gt;&gt; print(explorer.keys())\n['a', 'b']\n</code></pre> <pre><code>&gt;&gt;&gt; data = [10, 20, 30]\n&gt;&gt;&gt; explorer = Explore(data)\n&gt;&gt;&gt; print(explorer.keys())\n[0, 1, 2]\n</code></pre> Source code in <code>src\\jsonscout\\Explore.py</code> <pre><code>def keys(self):\n    \"\"\"\n    Get the keys or indices of direct children.\n\n    Returns\n    -------\n    list\n        For dictionaries: list of string keys.\n        For lists: list of integer indices.\n        For other types: empty list.\n\n    Examples\n    --------\n    &gt;&gt;&gt; data = {'a': 1, 'b': 2}\n    &gt;&gt;&gt; explorer = Explore(data)\n    &gt;&gt;&gt; print(explorer.keys())\n    ['a', 'b']\n\n    &gt;&gt;&gt; data = [10, 20, 30]\n    &gt;&gt;&gt; explorer = Explore(data)\n    &gt;&gt;&gt; print(explorer.keys())\n    [0, 1, 2]\n    \"\"\"\n    return self.child_keys\n</code></pre>"},{"location":"api/#jsonscout.Explore.Explore.value","title":"value","text":"<pre><code>value()\n</code></pre> <p>Get the underlying data object.</p> <p>Returns:</p> Type Description <code>any</code> <p>The wrapped data object being explored.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = {'name': 'Alice', 'age': 30}\n&gt;&gt;&gt; explorer = Explore(data)\n&gt;&gt;&gt; original = explorer.value()  # Returns: {'name': 'Alice', 'age': 30}\n&gt;&gt;&gt; assert original is data  # Same object reference\n</code></pre> Source code in <code>src\\jsonscout\\Explore.py</code> <pre><code>def value(self):\n    \"\"\"\n    Get the underlying data object.\n\n    Returns\n    -------\n    any\n        The wrapped data object being explored.\n\n    Examples\n    --------\n    &gt;&gt;&gt; data = {'name': 'Alice', 'age': 30}\n    &gt;&gt;&gt; explorer = Explore(data)\n    &gt;&gt;&gt; original = explorer.value()  # Returns: {'name': 'Alice', 'age': 30}\n    &gt;&gt;&gt; assert original is data  # Same object reference\n    \"\"\"\n    return self.data\n</code></pre>"},{"location":"api/#safe-access-module","title":"Safe Access Module","text":"<p>The <code>Maybe</code> class implements a monadic pattern for safe, exception-free navigation through potentially incomplete or malformed JSON structures, supporting chainable operations.</p>"},{"location":"api/#jsonscout.Maybe","title":"Maybe","text":"<p>Safe access wrapper for JSON data structures.</p> <p>This module provides the Maybe class, which implements a monadic-style pattern for safely accessing nested JSON data without raising exceptions when keys or indices don't exist.</p>"},{"location":"api/#jsonscout.Maybe.Maybe","title":"Maybe","text":"<pre><code>Maybe(json_object)\n</code></pre> <p>A wrapper for safe optional traversal over JSON data structures.</p> <p>The Maybe class provides safe access to fields and indices without raising exceptions when accessing non-existent keys or out-of-bounds indices. This follows a monadic pattern where operations can be chained safely.</p> <p>Parameters:</p> Name Type Description Default <code>json_object</code> <code>any</code> <p>The JSON object to wrap. Can be a dict, list, or any other type.</p> required <p>Attributes:</p> Name Type Description <code>data</code> <code>any</code> <p>The wrapped JSON object that may or may not exist.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = {'name': 'Alice', 'age': 30}\n&gt;&gt;&gt; maybe = Maybe(data)\n&gt;&gt;&gt; name = maybe.field('name').value()  # 'Alice'\n&gt;&gt;&gt; missing = maybe.field('missing').value()  # None\n</code></pre> <pre><code>&gt;&gt;&gt; data = [10, 20, 30]\n&gt;&gt;&gt; maybe = Maybe(data)\n&gt;&gt;&gt; first = maybe.index(0).value()  # 10\n&gt;&gt;&gt; out_of_bounds = maybe.index(5).value()  # None\n</code></pre> Source code in <code>src\\jsonscout\\Maybe.py</code> <pre><code>def __init__(self, json_object):\n    self.data = json_object\n</code></pre>"},{"location":"api/#jsonscout.Maybe.Maybe.array","title":"array","text":"<pre><code>array(func=lambda k, o: o, filter=lambda k, o: True, as_type=list)\n</code></pre> <p>Safely convert a JSON array or object to a list of transformed items.</p> <p>Applies a transformation function to each item in an array or each  key-value pair in an object. Items can be filtered before transformation.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>callable</code> <p>Function to transform each item. For arrays: func(index, value). For objects: func(key, value). Default returns the value unchanged.</p> <code>lambda k, o: o</code> <code>filter</code> <code>callable</code> <p>Function to filter items before transformation. Same signature as func. Default accepts all items.</p> <code>lambda k, o: True</code> <code>as_type</code> <code>type</code> <p>The type constructor for the result container, by default list.</p> <code>list</code> <p>Returns:</p> Type Description <code>list or as_type</code> <p>A container of transformed items, or empty container if not applicable.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; maybe_list = Maybe([1, 2, 3])\n&gt;&gt;&gt; doubled = maybe_list.array(lambda k,v: v*2)  # [2, 4, 6]\n&gt;&gt;&gt; filtered = maybe_list.array(lambda k,v: v*2, lambda k,v: v &gt; 2)  # [6]\n</code></pre> <pre><code>&gt;&gt;&gt; maybe_dict = Maybe({'a': 1, 'b': 2, 'c': 3})\n&gt;&gt;&gt; items = maybe_dict.array(lambda k,v: (k, v*2))  # [('a', 2), ('b', 4), ('c', 6)]\n&gt;&gt;&gt; filtered = maybe_dict.array(lambda k,v: (k, v*2), lambda k,v: v &gt; 2)  # [('c', 6)]\n</code></pre> <pre><code>&gt;&gt;&gt; not_array = Maybe(42).array()  # []\n</code></pre> Source code in <code>src\\jsonscout\\Maybe.py</code> <pre><code>def array(self, func=lambda k,o: o, filter=lambda k,o: True, as_type=list):\n    \"\"\"\n    Safely convert a JSON array or object to a list of transformed items.\n\n    Applies a transformation function to each item in an array or each \n    key-value pair in an object. Items can be filtered before transformation.\n\n    Parameters\n    ----------\n    func : callable, optional\n        Function to transform each item. For arrays: func(index, value).\n        For objects: func(key, value). Default returns the value unchanged.\n    filter : callable, optional\n        Function to filter items before transformation. Same signature as func.\n        Default accepts all items.\n    as_type : type, optional\n        The type constructor for the result container, by default list.\n\n    Returns\n    -------\n    list or as_type\n        A container of transformed items, or empty container if not applicable.\n\n    Examples\n    --------\n    &gt;&gt;&gt; maybe_list = Maybe([1, 2, 3])\n    &gt;&gt;&gt; doubled = maybe_list.array(lambda k,v: v*2)  # [2, 4, 6]\n    &gt;&gt;&gt; filtered = maybe_list.array(lambda k,v: v*2, lambda k,v: v &gt; 2)  # [6]\n\n    &gt;&gt;&gt; maybe_dict = Maybe({'a': 1, 'b': 2, 'c': 3})\n    &gt;&gt;&gt; items = maybe_dict.array(lambda k,v: (k, v*2))  # [('a', 2), ('b', 4), ('c', 6)]\n    &gt;&gt;&gt; filtered = maybe_dict.array(lambda k,v: (k, v*2), lambda k,v: v &gt; 2)  # [('c', 6)]\n\n    &gt;&gt;&gt; not_array = Maybe(42).array()  # []\n    \"\"\"\n    if self.data is not None:\n        if type(self.data) is dict:\n            return as_type([func(key, obj) for key,obj in self.data.items() if filter(key, obj)])\n        elif type(self.data) is list:\n            return as_type([func(idx, obj) for idx,obj in enumerate(self.data) if filter(idx, obj)])\n    return []\n</code></pre>"},{"location":"api/#jsonscout.Maybe.Maybe.field","title":"field","text":"<pre><code>field(field)\n</code></pre> <p>Safely access a field in a JSON object (dict).</p> <p>Parameters:</p> Name Type Description Default <code>field</code> <code>str</code> <p>The field name to access in the dictionary.</p> required <p>Returns:</p> Type Description <code>Maybe</code> <p>A new Maybe instance wrapping the field value or None if not present.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; maybe = Maybe({'name': 'Alice'})\n&gt;&gt;&gt; name = maybe.field('name').value()  # 'Alice'\n&gt;&gt;&gt; age = maybe.field('age').value()    # None\n</code></pre> Source code in <code>src\\jsonscout\\Maybe.py</code> <pre><code>def field(self, field):\n    \"\"\"\n    Safely access a field in a JSON object (dict).\n\n    Parameters\n    ----------\n    field : str\n        The field name to access in the dictionary.\n\n    Returns\n    -------\n    Maybe\n        A new Maybe instance wrapping the field value or None if not present.\n\n    Examples\n    --------\n    &gt;&gt;&gt; maybe = Maybe({'name': 'Alice'})\n    &gt;&gt;&gt; name = maybe.field('name').value()  # 'Alice'\n    &gt;&gt;&gt; age = maybe.field('age').value()    # None\n    \"\"\"\n    if self.data is not None and type(self.data) is dict and field in self.data:\n        return Maybe(self.data[field])\n    return Maybe(None)\n</code></pre>"},{"location":"api/#jsonscout.Maybe.Maybe.filter","title":"filter","text":"<pre><code>filter(func=lambda k, o: True)\n</code></pre> <p>Safely filter items in a JSON array or object.</p> <p>Parameters:</p> Name Type Description Default <code>func</code> <code>callable</code> <p>Function to determine which items to keep. For arrays: func(index, value). For objects: func(key, value). Default keeps all items.</p> <code>lambda k, o: True</code> <p>Returns:</p> Type Description <code>Maybe</code> <p>A new Maybe wrapping filtered data of the same type, or None if not applicable.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; maybe_dict = Maybe({'a': 1, 'b': 2, 'c': 3})\n&gt;&gt;&gt; filtered = maybe_dict.filter(lambda k,v: v &gt; 2).value()  # {'c': 3}\n</code></pre> <pre><code>&gt;&gt;&gt; maybe_list = Maybe([1, 2, 3, 4])\n&gt;&gt;&gt; filtered = maybe_list.filter(lambda i,v: v % 2 == 0).value()  # [2, 4]\n</code></pre> Source code in <code>src\\jsonscout\\Maybe.py</code> <pre><code>def filter(self, func=lambda k,o: True):\n    \"\"\"\n    Safely filter items in a JSON array or object.\n\n    Parameters\n    ----------\n    func : callable, optional\n        Function to determine which items to keep. For arrays: func(index, value).\n        For objects: func(key, value). Default keeps all items.\n\n    Returns\n    -------\n    Maybe\n        A new Maybe wrapping filtered data of the same type, or None if not applicable.\n\n    Examples\n    --------\n    &gt;&gt;&gt; maybe_dict = Maybe({'a': 1, 'b': 2, 'c': 3})\n    &gt;&gt;&gt; filtered = maybe_dict.filter(lambda k,v: v &gt; 2).value()  # {'c': 3}\n\n    &gt;&gt;&gt; maybe_list = Maybe([1, 2, 3, 4])\n    &gt;&gt;&gt; filtered = maybe_list.filter(lambda i,v: v % 2 == 0).value()  # [2, 4]\n    \"\"\"\n    if self.data is not None:\n        if type(self.data) is dict:\n            return Maybe({k: v for k,v in self.data.items() if func(k,v)})\n        elif type(self.data) is list:\n            return Maybe([obj for idx,obj in enumerate(self.data) if func(idx, obj)])\n    return Maybe(None)\n</code></pre>"},{"location":"api/#jsonscout.Maybe.Maybe.index","title":"index","text":"<pre><code>index(index)\n</code></pre> <p>Safely access an index in a JSON array (list).</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>int</code> <p>The zero-based index to access in the list.</p> required <p>Returns:</p> Type Description <code>Maybe</code> <p>A new Maybe instance wrapping the item value or None if not present.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; maybe = Maybe([1, 2, 3])\n&gt;&gt;&gt; first = maybe.index(0).value()  # 1\n&gt;&gt;&gt; fourth = maybe.index(3).value()  # None\n</code></pre> Source code in <code>src\\jsonscout\\Maybe.py</code> <pre><code>def index(self, index):\n    \"\"\"\n    Safely access an index in a JSON array (list).\n\n    Parameters\n    ----------\n    index : int\n        The zero-based index to access in the list.\n\n    Returns\n    -------\n    Maybe\n        A new Maybe instance wrapping the item value or None if not present.\n\n    Examples\n    --------\n    &gt;&gt;&gt; maybe = Maybe([1, 2, 3])\n    &gt;&gt;&gt; first = maybe.index(0).value()  # 1\n    &gt;&gt;&gt; fourth = maybe.index(3).value()  # None\n    \"\"\"\n    if self.data is not None and type(self.data) is list and index &lt; len(self.data):\n        return Maybe(self.data[index])\n    return Maybe(None)\n</code></pre>"},{"location":"api/#jsonscout.Maybe.Maybe.value","title":"value","text":"<pre><code>value()\n</code></pre> <p>Get the wrapped value.</p> <p>Returns:</p> Type Description <code>any</code> <p>The wrapped data object, which may be None if no value exists.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; maybe = Maybe({'name': 'Alice'})\n&gt;&gt;&gt; data = maybe.value()  # {'name': 'Alice'}\n&gt;&gt;&gt; assert data == maybe.data  # Both access methods return same object\n</code></pre> <pre><code>&gt;&gt;&gt; empty = Maybe(None)\n&gt;&gt;&gt; data = empty.value()  # None\n</code></pre> Source code in <code>src\\jsonscout\\Maybe.py</code> <pre><code>def value(self):\n    \"\"\"\n    Get the wrapped value.\n\n    Returns\n    -------\n    any\n        The wrapped data object, which may be None if no value exists.\n\n    Examples\n    --------\n    &gt;&gt;&gt; maybe = Maybe({'name': 'Alice'})\n    &gt;&gt;&gt; data = maybe.value()  # {'name': 'Alice'}\n    &gt;&gt;&gt; assert data == maybe.data  # Both access methods return same object\n\n    &gt;&gt;&gt; empty = Maybe(None)\n    &gt;&gt;&gt; data = empty.value()  # None\n    \"\"\"\n    return self.data\n</code></pre>"},{"location":"api/#xml-processing-module","title":"XML Processing Module","text":"<p>The <code>SimpleXML</code> class provides efficient XML-to-dictionary conversion capabilities for integrating XML data sources into JSON-based workflows.</p>"},{"location":"api/#jsonscout.SimpleXML","title":"SimpleXML","text":"<p>Simple XML to dictionary converter.</p> <p>This module provides a utility class for parsing XML strings and converting them to nested dictionary structures for easier JSON-like manipulation.</p>"},{"location":"api/#jsonscout.SimpleXML.SimpleXML","title":"SimpleXML","text":"<pre><code>SimpleXML(xml_string)\n</code></pre> <p>A utility class for converting XML strings to nested dictionary structures.</p> <p>This class provides simple XML parsing capabilities, converting XML elements to nested dictionaries and analyzing tag usage patterns.</p> <p>Parameters:</p> Name Type Description Default <code>xml_string</code> <code>str</code> <p>The XML string to parse and convert.</p> required <p>Attributes:</p> Name Type Description <code>xml_string</code> <code>str</code> <p>The original XML string.</p> <code>root</code> <code>Element</code> <p>The parsed XML root element.</p> <p>Raises:</p> Type Description <code>ParseError</code> <p>If the XML string is malformed or cannot be parsed.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml_data = '&lt;users&gt;&lt;user&gt;&lt;name&gt;Alice&lt;/name&gt;&lt;age&gt;30&lt;/age&gt;&lt;/user&gt;&lt;/users&gt;'\n&gt;&gt;&gt; parser = SimpleXML(xml_data)\n&gt;&gt;&gt; result = parser.to_dict()\n&gt;&gt;&gt; print(result)\n{'user': {'name': 'Alice', 'age': '30'}}\n</code></pre> Source code in <code>src\\jsonscout\\SimpleXML.py</code> <pre><code>def __init__(self, xml_string):\n    self.xml_string = xml_string\n    self.root = ET.fromstring(self.xml_string)\n</code></pre>"},{"location":"api/#jsonscout.SimpleXML.SimpleXML.analyze_tag_usagee","title":"analyze_tag_usagee","text":"<pre><code>analyze_tag_usagee()\n</code></pre> <p>Analyze the frequency of XML tags in the document.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A dictionary mapping tag names to their occurrence counts.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml_data = '&lt;root&gt;&lt;item&gt;1&lt;/item&gt;&lt;item&gt;2&lt;/item&gt;&lt;name&gt;test&lt;/name&gt;&lt;/root&gt;'\n&gt;&gt;&gt; parser = SimpleXML(xml_data)\n&gt;&gt;&gt; counts = parser.analyze_tag_usagee()\n&gt;&gt;&gt; print(counts)\n{'root': 1, 'item': 2, 'name': 1}\n</code></pre> Notes <p>The method name contains a typo ('usagee' instead of 'usage') but is preserved for backward compatibility.</p> Source code in <code>src\\jsonscout\\SimpleXML.py</code> <pre><code>def analyze_tag_usagee(self):\n    \"\"\"\n    Analyze the frequency of XML tags in the document.\n\n    Returns\n    -------\n    dict\n        A dictionary mapping tag names to their occurrence counts.\n\n    Examples\n    --------\n    &gt;&gt;&gt; xml_data = '&lt;root&gt;&lt;item&gt;1&lt;/item&gt;&lt;item&gt;2&lt;/item&gt;&lt;name&gt;test&lt;/name&gt;&lt;/root&gt;'\n    &gt;&gt;&gt; parser = SimpleXML(xml_data)\n    &gt;&gt;&gt; counts = parser.analyze_tag_usagee()\n    &gt;&gt;&gt; print(counts)\n    {'root': 1, 'item': 2, 'name': 1}\n\n    Notes\n    -----\n    The method name contains a typo ('usagee' instead of 'usage') but is\n    preserved for backward compatibility.\n    \"\"\"\n    tag_counts = {}\n    self._count_tags(self.root, tag_counts)\n    return tag_counts\n</code></pre>"},{"location":"api/#jsonscout.SimpleXML.SimpleXML.to_dict","title":"to_dict","text":"<pre><code>to_dict()\n</code></pre> <p>Convert the XML structure to a nested dictionary.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A nested dictionary representation of the XML structure. Text content becomes string values, and nested elements become nested dictionaries.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; xml_data = '&lt;person&gt;&lt;name&gt;John&lt;/name&gt;&lt;age&gt;25&lt;/age&gt;&lt;/person&gt;'\n&gt;&gt;&gt; parser = SimpleXML(xml_data)\n&gt;&gt;&gt; result = parser.to_dict()\n&gt;&gt;&gt; print(result)\n{'name': 'John', 'age': '25'}\n</code></pre> Source code in <code>src\\jsonscout\\SimpleXML.py</code> <pre><code>def to_dict(self):\n    \"\"\"\n    Convert the XML structure to a nested dictionary.\n\n    Returns\n    -------\n    dict\n        A nested dictionary representation of the XML structure.\n        Text content becomes string values, and nested elements become\n        nested dictionaries.\n\n    Examples\n    --------\n    &gt;&gt;&gt; xml_data = '&lt;person&gt;&lt;name&gt;John&lt;/name&gt;&lt;age&gt;25&lt;/age&gt;&lt;/person&gt;'\n    &gt;&gt;&gt; parser = SimpleXML(xml_data)\n    &gt;&gt;&gt; result = parser.to_dict()\n    &gt;&gt;&gt; print(result)\n    {'name': 'John', 'age': '25'}\n    \"\"\"\n    return self._element_to_dict(self.root)\n</code></pre>"},{"location":"api/#unified-interface-module","title":"Unified Interface Module","text":"<p>The <code>Xplore</code> class serves as a comprehensive facade that combines the functionality of all core modules into a single, intuitive interface for streamlined JSON exploration workflows.</p>"},{"location":"api/#jsonscout.Xplore","title":"Xplore","text":"<p>Unified convenience facade for JSON exploration.</p> <p>This module provides the Xplore class, which combines the functionality of Explore, Maybe, and SimpleXML into a single convenient interface for exploring and navigating JSON data structures.</p>"},{"location":"api/#jsonscout.Xplore.Xplore","title":"Xplore","text":"<pre><code>Xplore(data)\n</code></pre> <p>Unified convenience facade combining exploration tools.</p> <p>This class provides a single entry point that wires together the functionality of Explore (structural exploration), Maybe (safe access), and SimpleXML (XML parsing) into one convenient interface.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>any</code> <p>The input data to be explored. Can be JSON data, XML string, or other data types.</p> required <p>Attributes:</p> Name Type Description <code>data</code> <code>any</code> <p>The original input data.</p> <code>explore</code> <code>Explore</code> <p>An Explore instance for general data exploration.</p> <code>maybe</code> <code>Maybe</code> <p>A Maybe instance for safe data access operations.</p> <code>xml</code> <code>SimpleXML or None</code> <p>A SimpleXML instance if data is an XML string, None otherwise.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = {'users': [{'name': 'Alice', 'age': 30}]}\n&gt;&gt;&gt; xplore = Xplore(data)\n&gt;&gt;&gt; name = xplore['users'][0]['name'].value()\n&gt;&gt;&gt; print(name)  # 'Alice'\n</code></pre> <pre><code>&gt;&gt;&gt; xml_data = '&lt;user&gt;&lt;name&gt;Bob&lt;/name&gt;&lt;/user&gt;'\n&gt;&gt;&gt; xplore = Xplore(xml_data)\n&gt;&gt;&gt; xml_dict = xplore.xml.to_dict()\n&gt;&gt;&gt; print(xml_dict)  # {'name': 'Bob'}\n</code></pre> Notes <ul> <li>Creates an Explore instance for general data exploration</li> <li>Creates a Maybe instance for safe data access operations  </li> <li>Creates a SimpleXML instance only if data is a string starting with \"&lt;\"</li> <li>The xml attribute will be None if data is not XML-formatted</li> </ul> Source code in <code>src\\jsonscout\\Xplore.py</code> <pre><code>def __init__(self, data):\n    self.data = data\n    self.explore = Explore(data)\n    self.maybe = Maybe(data)\n    self.xml = SimpleXML(data) if isinstance(data, str) and data.strip().startswith(\"&lt;\") else None\n</code></pre>"},{"location":"api/#jsonscout.Xplore.Xplore.keys","title":"keys","text":"<pre><code>keys()\n</code></pre> <p>Get the keys of the current data if it's a dictionary or list.</p> <p>Returns:</p> Type Description <code>list</code> <p>For dictionaries: list of string keys. For lists: list of integer indices. For other types: empty list.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = {'name': 'Alice', 'age': 30}\n&gt;&gt;&gt; xplore = Xplore(data)\n&gt;&gt;&gt; print(xplore.keys())\n['name', 'age']\n</code></pre> <pre><code>&gt;&gt;&gt; data = [10, 20, 30]\n&gt;&gt;&gt; xplore = Xplore(data)\n&gt;&gt;&gt; print(xplore.keys())\n[0, 1, 2]\n</code></pre> Source code in <code>src\\jsonscout\\Xplore.py</code> <pre><code>def keys(self):\n    \"\"\"\n    Get the keys of the current data if it's a dictionary or list.\n\n    Returns\n    -------\n    list\n        For dictionaries: list of string keys.\n        For lists: list of integer indices.\n        For other types: empty list.\n\n    Examples\n    --------\n    &gt;&gt;&gt; data = {'name': 'Alice', 'age': 30}\n    &gt;&gt;&gt; xplore = Xplore(data)\n    &gt;&gt;&gt; print(xplore.keys())\n    ['name', 'age']\n\n    &gt;&gt;&gt; data = [10, 20, 30]\n    &gt;&gt;&gt; xplore = Xplore(data)\n    &gt;&gt;&gt; print(xplore.keys())\n    [0, 1, 2]\n    \"\"\"\n    return self.explore.keys()\n</code></pre>"},{"location":"api/#jsonscout.Xplore.Xplore.value","title":"value","text":"<pre><code>value()\n</code></pre> <p>Get the underlying data object.</p> <p>Returns:</p> Type Description <code>any</code> <p>The wrapped data object being explored.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; data = {'name': 'Alice', 'age': 30}\n&gt;&gt;&gt; xplore = Xplore(data)\n&gt;&gt;&gt; original = xplore.value()  # Returns: {'name': 'Alice', 'age': 30}\n&gt;&gt;&gt; assert original is data  # Same object reference\n</code></pre> Source code in <code>src\\jsonscout\\Xplore.py</code> <pre><code>def value(self):\n    \"\"\"\n    Get the underlying data object.\n\n    Returns\n    -------\n    any\n        The wrapped data object being explored.\n\n    Examples\n    --------\n    &gt;&gt;&gt; data = {'name': 'Alice', 'age': 30}\n    &gt;&gt;&gt; xplore = Xplore(data)\n    &gt;&gt;&gt; original = xplore.value()  # Returns: {'name': 'Alice', 'age': 30}\n    &gt;&gt;&gt; assert original is data  # Same object reference\n    \"\"\"\n    return self.data\n</code></pre>"}]}